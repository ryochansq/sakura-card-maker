{"version":3,"sources":["components/Header.tsx","Store.tsx","components/MyTextField.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","AppBar","position","Toolbar","Typography","variant","Store","createStore","state","name","year","month","date","grade","gradeYear","myBoom","target","MyTextField","item","rows","appendText","useGlobalState","info","setInfo","TextField","size","fullWidth","multiline","InputProps","endAdornment","InputAdornment","value","onChange","event","ItemGrid","children","title","Grid","xs","container","direction","alignItems","sm","useStyles","makeStyles","root","padding","Form","setGrade","classes","className","spacing","Select","margin","MenuItem","paper","button","background","border","borderRadius","boxShadow","color","height","App","content","justify","md","lg","Paper","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb4ae926.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst Header: React.FC = () => {\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Typography variant='h6'>さくら学院 生徒証メーカー</Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header\n","import { createStore } from 'react-hooks-global-state'\n\nconst reducer = (state: StudentInfo): StudentInfo => state\n\nconst initialState: StudentInfo = {\n  name: '',\n  year: '',\n  month: '',\n  date: '',\n  grade: '中等部',\n  gradeYear: '',\n  myBoom: '',\n  target: '',\n}\n\nexport const Store = createStore(reducer, initialState)\n","import React from 'react'\nimport { InputAdornment, TextField } from '@material-ui/core'\n\nimport { Store } from 'Store'\n\ntype Props = {\n  item: keyof StudentInfo\n  rows: number\n  appendText?: string\n}\n\nconst MyTextField: React.FC<Props> = ({ item, rows, appendText }) => {\n  const [info, setInfo] = Store.useGlobalState(item)\n\n  return (\n    <TextField\n      variant='outlined'\n      size='small'\n      fullWidth\n      multiline={rows > 1}\n      rows={rows}\n      InputProps={{ endAdornment: <InputAdornment position='end'>{appendText || ''}</InputAdornment> }}\n      value={info}\n      onChange={(event) => setInfo(event.target.value as string)}\n    />\n  )\n}\n\nexport default MyTextField\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, MenuItem, Select, Typography } from '@material-ui/core'\n\nimport { Store } from 'Store'\nimport MyTextField from 'components/MyTextField'\n\ntype ItemGridProps = {\n  title: string\n}\n\nconst ItemGrid: React.FC<ItemGridProps> = ({ children, title }) => {\n  return (\n    <Grid item xs={12}>\n      <Grid container direction='row' alignItems='center'>\n        <Grid item xs={12} sm={2}>\n          <Typography variant='subtitle2'>{title}</Typography>\n        </Grid>\n        {children}\n      </Grid>\n    </Grid>\n  )\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: '8px',\n  },\n  item: {\n    // margin: '8px 0',\n  },\n})\n\nconst Form: React.FC = () => {\n  // const studentInfo = Store.getState()\n  const [grade, setGrade] = Store.useGlobalState('grade')\n  const classes = useStyles()\n\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <ItemGrid title='名前'>\n        <Grid item xs={12} sm={6}>\n          <MyTextField item='name' rows={1} />\n        </Grid>\n      </ItemGrid>\n      <ItemGrid title='生年月日'>\n        <Grid item xs={4} sm={3}>\n          <MyTextField item='year' rows={1} appendText='年' />\n        </Grid>\n        <Grid item xs={4} sm={2}>\n          <MyTextField item='month' rows={1} appendText='月' />\n        </Grid>\n        <Grid item xs={4} sm={2}>\n          <MyTextField item='date' rows={1} appendText='日' />\n        </Grid>\n      </ItemGrid>\n      <ItemGrid title='学年'>\n        <Select variant='outlined' margin='dense' value={grade} onChange={(event) => setGrade(event.target.value as '中等部' | '小等部')}>\n          <MenuItem value='中等部'>中等部</MenuItem>\n          <MenuItem value='小等部'>小等部</MenuItem>\n        </Select>\n        <Grid item xs={4} sm={2}>\n          <MyTextField item='gradeYear' rows={1} appendText='年' />\n        </Grid>\n      </ItemGrid>\n      <ItemGrid title='マイブーム'>\n        <Grid item xs={12} sm={10}>\n          <MyTextField item='myBoom' rows={2} />\n        </Grid>\n      </ItemGrid>\n      <ItemGrid title='今年の目標'>\n        <Grid item xs={12} sm={10}>\n          <MyTextField item='target' rows={2} />\n        </Grid>\n      </ItemGrid>\n    </Grid>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button, Grid, Paper, Typography } from '@material-ui/core'\n// import html2canvas from 'html2canvas'\n\nimport Header from 'components/Header'\nimport Form from 'components/Form'\n\nconst useStyles = makeStyles({\n  paper: {\n    padding: '8px',\n  },\n  button: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n})\n\nconst App: React.FC = () => {\n  const classes = useStyles()\n  // setTimeout(() => {\n  //   html2canvas(document.body).then(function (canvas) {\n  //     document.body.appendChild(canvas)\n  //   })\n  //   console.info(document.body)\n  // })\n  return (\n    <div className='App'>\n      <meta name='viewport' content='minimum-scale=1, initial-scale=1, width=device-width' />\n      <Header />\n      <Grid container justify='center'>\n        <Grid item xs={12} md={8} lg={6}>\n          <Paper className={classes.paper}>\n            <Typography variant='subtitle1'>以下の項目に答えて、自分の生徒証を作ろう！</Typography>\n            <Form />\n            <Button className={classes.button}>Hello Sakura Gakuin!!</Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}